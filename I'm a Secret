import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import os

# === Paths to resources ===
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
ASSETS_DIR = os.path.join(BASE_DIR, "assets")
BACKGROUND_PATH = os.path.join(ASSETS_DIR, "Im_a_secret4.png")
ICON_PATH = os.path.join(ASSETS_DIR, "smile.ico")

# === Vigenère cipher key ===
VIGENERE_KEY = "SECRETKEY"

# === Vigenère encryption ===
def encrypt_vigenere(plaintext, key=VIGENERE_KEY):
    ciphertext = ""
    key = key.upper()
    key_length = len(key)
    for i, char in enumerate(plaintext):
        if char.isalpha():
            offset = 65 if char.isupper() else 97
            key_char = key[i % key_length]
            key_shift = ord(key_char) - 65
            encrypted_char = chr((ord(char) - offset + key_shift) % 26 + offset)
            ciphertext += encrypted_char
        else:
            ciphertext += char
    return ciphertext

# === Vigenère decryption ===
def decrypt_vigenere(ciphertext, key=VIGENERE_KEY):
    plaintext = ""
    key = key.upper()
    key_length = len(key)
    for i, char in enumerate(ciphertext):
        if char.isalpha():
            offset = 65 if char.isupper() else 97
            key_char = key[i % key_length]
            key_shift = ord(key_char) - 65
            decrypted_char = chr((ord(char) - offset - key_shift) % 26 + offset)
            plaintext += decrypted_char
        else:
            plaintext += char
    return plaintext

# === Handle encryption button click ===
def on_encrypt():
    text = text_entry.get("1.0", tk.END).strip()
    if not text:
        messagebox.showerror("Error", "Enter text to encrypt!")
        return
    try:
        encrypted = encrypt_vigenere(text)
        result_text.delete("1.0", tk.END)
        result_text.insert(tk.END, encrypted)
    except Exception as e:
        messagebox.showerror("Error", f"Encryption failed: {e}")

# === Handle decryption button click ===
def on_decrypt():
    text = text_entry.get("1.0", tk.END).strip()
    if not text:
        messagebox.showerror("Error", "Enter text to decrypt!")
        return
    try:
        decrypted = decrypt_vigenere(text)
        result_text.delete("1.0", tk.END)
        result_text.insert(tk.END, decrypted)
    except Exception as e:
        messagebox.showerror("Error", f"Decryption failed: {e}")

# === Copy result to clipboard ===
def copy_to_clipboard():
    text = result_text.get("1.0", tk.END).strip()
    if text:
        root.clipboard_clear()
        root.clipboard_append(text)
        root.update()
        messagebox.showinfo("Copied", "Text copied to clipboard!")

# === Paste text from clipboard ===
def paste_from_clipboard():
    try:
        clipboard_content = root.clipboard_get()
        text_entry.delete("1.0", tk.END)
        text_entry.insert(tk.END, clipboard_content)
    except tk.TclError:
        messagebox.showerror("Error", "Clipboard is empty!")

# === GUI setup ===
root = tk.Tk()
root.title("I'm a Secret")
root.geometry("650x800")
root.resizable(False, False)
root.configure(bg="black")

# Set window icon
if os.path.exists(ICON_PATH):
    try:
        root.iconbitmap(ICON_PATH)
    except Exception as e:
        messagebox.showerror("Error", f"Failed to set icon:\n{e}")
else:
    messagebox.showwarning("Warning", "Icon file not found. Using default icon.")

# Set background image
try:
    bg_image = Image.open(BACKGROUND_PATH)
    bg_image = bg_image.resize((650, 800), Image.LANCZOS)
    bg_photo = ImageTk.PhotoImage(bg_image)
    bg_label = tk.Label(root, image=bg_photo)
    bg_label.place(x=0, y=0, relwidth=1, relheight=1)
except Exception as e:
    messagebox.showerror("Error", f"Failed to load background:\n{e}")

# Text input label
tk.Label(root, text="Enter text:", font=("Helvetica", 12), bg="#ff00bf", fg="yellow").place(x=30, y=20)
text_entry = tk.Text(root, height=8, width=72, font=("Helvetica", 11), bg="white", fg="black", insertbackground="black")
text_entry.place(x=30, y=50)

# Encrypt/Decrypt buttons
btn_frame = tk.Frame(root, bg="#ff00bf")
btn_frame.place(x=30, y=280)

encrypt_btn = tk.Button(btn_frame, text="Encrypt", command=on_encrypt, bg="yellow", fg="blue", font=("Helvetica", 12))
encrypt_btn.grid(row=0, column=0, padx=10)

decrypt_btn = tk.Button(btn_frame, text="Decrypt", command=on_decrypt, bg="yellow", fg="black", font=("Helvetica", 12))
decrypt_btn.grid(row=0, column=1, padx=10)

# Clipboard buttons
clipboard_frame = tk.Frame(root, bg="#ff00bf")
clipboard_frame.place(x=30, y=340)

copy_btn = tk.Button(clipboard_frame, text="Copy result", command=copy_to_clipboard, bg="yellow", fg="green", font=("Helvetica", 12))
copy_btn.grid(row=0, column=0, padx=10)

paste_btn = tk.Button(clipboard_frame, text="Paste from clipboard", command=paste_from_clipboard, bg="yellow", fg="red", font=("Helvetica", 12))
paste_btn.grid(row=0, column=1, padx=10)

# Result output
tk.Label(root, text="Result:", font=("Helvetica", 12), bg="#ff00bf", fg="yellow").place(x=30, y=410)
result_text = tk.Text(root, height=8, width=72, font=("Helvetica", 11), bg="white", fg="black", insertbackground="black")
result_text.place(x=30, y=440)

# Start the application
root.mainloop()
